from __future__ import annotations

from dataclasses import dataclass, field
from grams.actors.dataset_actor import DatasetActor
from grams.actors.db_actor import DBActor
from grams.algorithm.data_graph.dg_factory import DGFactory
from grams.algorithm.data_graph.dg_config import DGConfigs2
from grams.algorithm.data_graph.dg_graph import DGGraph
from grams.algorithm.kg_index import KGObjectIndex, TraversalOption
from grams.inputs.linked_table import LinkedTable

from osin.integrations.ream import OsinActor
from ream.dataset_helper import DatasetDict
from timer import Timer


@dataclass
class DGActorParams:
    max_n_hop: int = field(
        default=1, metadata={"help": "retriving entities up to this number of hops"}
    )
    cfg: DGConfigs2 = field(
        default_factory=DGConfigs2, metadata={"help": "data graph factory configs"}
    )


class DGActor(OsinActor[LinkedTable, DGActorParams]):
    VERSION = 100

    def __init__(
        self, params: DGActorParams, db_actor: DBActor, dataset_actor: DatasetActor
    ):
        super().__init__(params, [dataset_actor, db_actor])
        self.timer = Timer.get_instance()
        self.dataset_actor = dataset_actor
        self.db_actor = db_actor

    def run(self, table: LinkedTable):
        db = self.db_actor.fetch_by_table(table, self.params.max_n_hop, verbose=True)
        with self.timer.watch("build kg object index"):
            kg_object_index = KGObjectIndex.from_entities(
                list(db.found_wdentity_ids.intersection(db.wdentities.keys())),
                db.wdentities,
                db.wdprops,
                n_hop=self.params.max_n_hop,
                traversal_option=TraversalOption.TransitiveOnly,
            )

        dg_factory = DGFactory(db.wdentities, db.wdprops)
        return dg_factory.create_dg(
            table,
            kg_object_index,
        )

    def run_dataset(self, dsquery: str) -> DatasetDict[list[DGGraph]]:
        dsdict = self.dataset_actor.query(dsquery)

        def exec():
            out = DatasetDict(dsdict.name, {})
            for name, ds in dsdict.items():
                dgs = []
                for example in ds:
                    dgs.append(self.run(example.table))
                out[name] = dgs
            return out

    def evaluate(self, *dsqueries: str):
        for dsquery in dsqueries:
            self.run_dataset(dsquery)
